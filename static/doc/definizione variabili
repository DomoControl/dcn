Definizioni variabili per il funzionamento

=============== Logica booleana ==============

 &        |      ^      ~
AND      OR     XOR     Complement
00|0    00|0    00|0    ~
01|0    01|1    01|1
10|0    10|1    10|1
11|1    11|1    11|0

=============== Board ==============

self.IOThread -> Lista dei Thread attivi che testano il valore in ingresso delle schede
0 se thread non è attivo, 1 se è attivo
[0, 0, 0, 0...]

Matrice Board
0 n                     (0, 1, 2, 3, 4, 5)
1 id                    (1, 2, 3, 4, 5, 6)
2 enable                (1, 1, 1, 1, 0, 1)
3 address               (32, 33, 0, 40, 39, 40)
4 board_type_id         (1, 1, 3, 4, 5, 6)
5 IOThread              [0, 0, 0, 0, 0, 0] # Quando a 1 significa che il thread è attivo
6 board_bin_val         [0, 0, 0, 0, 0, 0]
7 board_bin_val_new     [0, 0, 0, 0, 0, 0] # nuovo valore del'IO
8 board_update          [0, 0, 0, 0, 0, 0] # se 1, l'IO deve essere aggiornato (old changerequest)
9 definition            (0, 0, 1, 1, 0, 0) # 0= uscita, 1= ingresso

=============== Board_IO ==============

self.mBoard_io #matrice board_io
0 n           (0, 1, 2, 3, 4, 5)
1 id          (13, 14, 16, 20, 21)
2 type_id     (2, 2, 2, 2, 2) # IO type: 0: IN virtuae, 1: IN, 2: OUT, 3: OUT virtuale, 4: tempemperature, 5: humidity, 6: light, 7: voltage, 8: current
3 enable      (1, 1, 1, 1, 1)
4 board_id    (1, 1, 1, 1, 1)
5 address     (0, 1, 2, 3, 4)
6 area_id     (4, 1, 2, 5, 5)
7 definition  (0, 0, 1, 1, 0) # 0= suscita, 1= ingresso


============ board_io ==========
self.board_io_address
(0, 1, 2, 3, 4, 5, 6, 0, 1, 0, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 0, 0)

self.board_io_board_id
(1, 1, 1, 1, 1, 1, 1, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 6)

=============== PROGRAM ==============
self.PThread -> Lista dei Thread attivi del programma

self.prog_n
(0, 1)
 |  |
 |  |Secondo programma
 |Primo programma

self.prog_id -> ID programmi
(3, 4)

self.prog_type_id -> tipo di programma
(4, 4)

tipi programmi:
- Manuale: out = 1 if in == 1 else 0
- Timer: come timer scale: if timer > 0 or in == 1: out = 1
- Timeout: if timer > 0: out = 1

self.prog_in_id -> in_id
(1, 2)

self.prog_out_id -> out_id

self.prog_inverted -> inverted output

self.prog_timer -> timer

self.prog_chrono -> Chrono

self.prog_enable -> program enable

self.prog_counter -> contatore tempo

self.timeout -> variabile che serve per il programma timeout

self.mProg # Matrice program
0 n             (0, 1, 2, 3, 4, 5)
1 id            (3, 4, 5, 6, 7, 8)
2 in_id         (24, 30, 30, 31, 36, 33)
3 delay         (0, 0, 0, 0, 0, 0)
4 inverted      (0, 0, 0, 0, 0, 0)
5 out_id        (13, 14, 21, 16, 23, 20)
6 type_id       (4, 1, 4, 3, 4, 3)
7 timer         (130, 10, 10, 10, 5, 130)
8 chrono        (u'6-20-00-10-6-20-20-10;7-20-55-00-7-23-18-00', u'6-20-00-10-6-20-20-10;7-20-55-00-7-23-18-00', u'6-20-00-10-6-20-20-10;7-20-55-00-7-23-18-00', u'6-20-00-10-6-20-20-10;7-20-55-00-7-23-18-00', u'6-20-00-10-6-20-20-10;7-20-55-00-7-23-18-00', u'6-20-00-10-6-20-20-10;7-20-55-00-7-23-18-00')
9 enable        (1, 1, 0, 0, 0, 0)
10 counter       [1447585605.9, 1447585605.9, 1447585605.9, 1447585605.9, 1447585605.9, 1447585605.9]
11 PTHread      [0, 0, 0, 0, 0, 0]

-------------------------------------------
Avviso Massaggi su interfaccia web tramite CSS:
msg_type = 'danger'  -> primary (blue), success (lightgreen), info (lightblue), warning (Yellow), danger (Red)
msg = 'bla bla bla'  -> Messaggio da scrivere sulla pagina
------------------------------------------
Definizione variabili per formula uscite:

Giorni:
DAY: Variabile giorno
MO: Lunedi
TU: Martedi
WE: Mercoledi
TH: Giovedi
FR: Venerdi
SA: Sabato
SU: Domenica

H: Variabile ora

Operatori:
OR, AND, XOR, NOT, ==, >, >=, <, <=

Timer: TI
