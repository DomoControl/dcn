#!/usr/bin/python
import date
import time
import smbus
from db import Database
import datetime
import copy
import sht21
import os
import threading

IOThread=[]  # lista di Thread in esecuzione per la lettura degli IO
IOVal = {}  # Dizionario con {board_id: {num_ingressi: valore_ingressi}}
IOBin = {}  # List to put bin value input
PThread = []  # Lista di Thread che processato i programmi (self.P)
OutChange = {}
i2c = 0  # BUS I2C
A = {}
P = {}
db = Database()

class GetInput(threading.Thread):
    def __init__(self,board):
        threading.Thread.__init__(self)
        self.board = board

    def getIOVal(self):  # ritorna il valore degli ingressi
        return IOVal

    def run(self):
        # print self.board
        board_type_id = self.board['board_type_id']  # Il tipo di scheda

        if board_type_id == 1:  # I2C
            value = self.read_i2c(self.board['address'])  # Ritorna il byte degli ingressi I2C
            if IOBin.get(self.board['id'], 'Not Exist') != value:  # Testa se il valore e' cambiato
                IOBin.update({self.board['id']: value})
                IOVal[self.board['id']] = {}
                for i in range(0,8):  # Iterazione del byte
                    if value & 1 == 1:
                        IOVal[self.board['id']].update({i: 1})
                    else:
                        IOVal[self.board['id']].update({i: 0})
                    value /= 2

                # print IOVal

        elif board_type_id == 2:  # RS485
            pass

        elif board_type_id == 3:  # WEB
            if IOVal.get(self.board['id'], 'No') == 'No':  # Testa se il valore e' cambiato
                IOBin[self.board['id']] = 0
                IOVal[self.board['id']] = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0 }

        elif board_type_id == 4:  # SHT21 Temperature
            temperature = round(sht21.SHT21(i2c).read_temperature(), 1)  # Get temperature
            humidity = round(sht21.SHT21(i2c).read_humidity(), 1)  # Get humidity

            if IOVal.get(self.board['id'], 'Not Exist') != board_type_id:
                IOVal[self.board['id']] = {}

            IOVal[self.board['id']].update({0: temperature})
            IOVal[self.board['id']].update({1: humidity})

            q = 'INSERT INTO sensor (type, value) VALUES("{}", "{}");'.format('1', temperature)
            db.query(q)
            q = 'INSERT INTO sensor (type, value) VALUES("{}", "{}");'.format('2', humidity)
            db.query(q)

            time.sleep(300)

        elif board_type_id == 5:
            # print "PD9535"
            pass


        # Parte che controlla se OutChange contiene dei bit e in questo caso li processa
        for k, v in OutChange.iteritems():
            if len(v) > 0:
                print k, v

        # print IOVal, IOBin
        IOThread.remove(self.board['id'])  # Rimuove il Thread dalla lista dei Thread in quanto e' terminato

    def read_i2c(self, board_address):
        bus = smbus.SMBus(i2c)
        return bus.read_byte(board_address)  # legge lo stato degli ingressi

    def read_web(self):
        pass

class SetOutput(threading.Thread):
    def __init__(self,program):
        threading.Thread.__init__(self)
        self.program = program

    def run(self):
        program_type_id = self.program['type_id']
        in_id = self.program['in_id']
        in_board_id = A['board_io'][in_id]['board_id']
        out_id = self.program['out_id']
        out_board_id = A['board_io'][out_id]['board_id']


        if program_type_id == 1:  # Timer
            pass
        elif program_type_id == 2:  # Timeout
            pass
        elif program_type_id == 3:  # Aautomatic
            pass
        elif program_type_id == 4:  # Manual
            pass

        elif program_type_id == 5:  # Thermostat
            pass


class Domocontrol:
    """Class DomoControl"""

    def __init__(self):  # p = program dictionary
        self.db = Database()

        self.mapping = [0, 1, 2, 4, 8, 16, 32, 64, 128]

        # self.i2c = 0  # (dev/i2c_x) Default is 0 but getBusValue check for right value
        self.getBusValue()  # set /dev/i2c_x

        self.B = {}  # IN / OUT value
        self.BCopy = {}  # Copy B dictionary

        self.C = {}  # Sensor value
        self.CCopy = {}  # Copy C dictionary

        self.S = {}
        self.SCopy = {}

        self.P = {}  # Dict with Program
        self.PCopy = {}  # Copy P dictionary

        self.A = {}  # All unchanged db information
        self.ACopy = {}  # Copy A dictionary

        self.IO = {'io': {}, 'sensor': {}, 'board_io': {}}  # Content IO status (menu status)
        self.IOCopy = {'io': {}, 'sensor': {}, 'board_io': {}}  # Copy IO dictionary
        self.IOCopy8 = {1: 1}

        self.M = {}  # matrix dict
        self.MCopy = {}

        self.n = 0

        self.dir_root = os.path.dirname(os.path.abspath(__file__))  # path of program

        self.setupDict()
        self.setupI2C()
        # self.initializeIO()


    def getInputs(self):
        """
        Funzione che richiama la classe GetInput che aggiorna gli ingressi delle varie schede
        """
        for board in self.A['board']:  # Fa il parsing delle board
            board_id = self.A['board'][board]['id']  # id della board
            if board_id in IOThread:  # Controlla se il Thread e' terminato
                pass
            else:  # Thread terminato
                IOThread.append(board_id)  # Importa il Thread attivo
                v = GetInput(self.A['board'][board_id])  # Lancia il Thread
                v.start()
            # print IOThread, IOVal

    def setOutputs(self):
        """
        Funzione che processa i programmi
        """
        for p in self.P:
            if p in PThread:
                pass
            else:
                PThread.append(p)
                v = SetOutput(self.P[p])
                v.start()


    def setOutVal(self, *args):  # Viene chiamata dal web.py quando viene premuto un pulsante
        OutChange[args[0][0]][args[0][1]] = 0 if args[0][2] else 1  # OutChange contiene tutti i bit cambiati dall'utente
        print OutChange

    def now(self):
        """
        Ritorna l'ora corrente
        """
        return date.now()

    def getBusValue(self):
        """
        Controlla il numero del divice I2C
        """
        print("Start getBusValue")
        global i2c
        self.device = []
        for a in range(0, 10):
            # print a
            try:
                i2c = smbus.SMBus(a)
                i2c = a  # address i2c /dev/i2c_x
                print('Device i2c: {}'.format(self.i2c))
            except:
                pass

    def setupDict(self):  # program setup
        """
        Funzione di setup
        Imposta il valore di tutti i dizionari per il corretto funzionamento
        """
        print("Start Domocontrol Setup")

        # Dict IO['io']
        q_board = 'SELECT * FROM board WHERE board_type_id=1 OR board_type_id=2 OR board_type_id=3'
        r_board = self.db.query(q_board)
        for rr_board in r_board:
            # print rr_board, r_board
            self.IO['io'].update({rr_board['id']: {'value': 0, 'update': 0}})

        # Board_IO informations
        q = 'SELECT * FROM board_io'
        res = self.db.query(q)
        self.A['board_io'] = {}
        for r in res:
            self.A['board_io'].update({r['id']: r})

        # icon list
        icon_path = os.path.join(self.dir_root, 'static/icon')
        files = [fn for fn in os.listdir(icon_path)]
        self.A['icon'] = files

        # program data
        q = 'SELECT id, in_id, delay, inverted, out_id, type_id, name, description, timer, chrono, enable FROM program WHERE enable = 1'
        res = self.db.query(q)
        self.P = {}
        for r in res:
            # self.P[r['id']] = r
            # self.P[r['id']].update({'IN': r['inverted'], 'OUT': 0})
            self.P.update({r['id']: r})
            self.P[r['id']].update({'TA': 0})

        # Area informations
        q = 'SELECT id, name, description, sort FROM area ORDER BY sort'
        res = self.db.query(q)
        self.A['area'] = {}
        for r in res:
            self.A['area'].update({r['id']: r})

        # Area + other info SORTED #Menu_status
        q = 'SELECT a.id AS area_id, a.name AS area_name, a.description AS area_description, \
                bio.id AS  board_io_id,  bio.io_type_id AS board_io_io_type_id, bio.name AS board_io_name, bio.description AS board_io_description, bio.address AS board_io_address,   \
                bio.board_id AS board_io_board_id, bio.icon_on AS board_io_icon_on, bio.icon_off AS board_io_icon_off \
            FROM board_io AS bio \
                LEFT JOIN area AS a ON bio.area_id=a.id \
            ORDER BY a.sort'
        res = self.db.query(q)
        self.A['area_board_io'] = {}
        for r in res:
            self.A['area_board_io'].update({r['board_io_id']: r})

        # IO_Type informations
        q = 'SELECT id, type, name, description FROM io_type'
        res = self.db.query(q)
        self.A['io_type'] = {}
        for r in res:
            self.A['io_type'].update({r['id']: r})

        # Board informations
        q = 'SELECT * FROM board WHERE enable = 1'
        res = self.db.query(q)
        self.A['board'] = {}
        for r in res:
            self.A['board'].update({r['id']: r})
            OutChange[r['id']] = {}

        # Board_type informations
        q = 'SELECT * FROM board_type'
        res = self.db.query(q)
        self.A['board_type'] = {}
        for r in res:
            self.A['board_type'].update({r['id']: r})

        # Program_type informations
        q = 'SELECT * FROM program_type'
        res = self.db.query(q)
        self.A['program_type'] = {}
        for r in res:
            self.A['program_type'].update({r['id']: r})
        global A, P
        A = self.A
        P = self.P

        print("End Domocontrol Setup")


    def getDict(self, dict):  # Ritorna i Dict chiamati da web.py
        return eval(dict)



    def setupI2C(self):  # function to setup initial values of board
        for board_id in self.A['board']:
            if self.A['board'][board_id]['board_type_id'] == 1:  # I2C standard 8 bit
                pass
            elif self.A['board'][board_id]['board_type_id'] == 2:  # RS485
                pass
            elif self.A['board'][board_id]['board_type_id'] == 3:  # WEB
                pass
            elif self.A['board'][board_id]['board_type_id'] == 4:  # SHT21
                pass
            elif self.A['board'][board_id]['board_type_id'] == 5:  # PCA9535 16 I/O expander
                read_byte_0 = 0x0
                read_byte_1 = 0x1
                output_port_0 = 0x2
                output_port_1 = 0x3
                polarity_inversion_port_0 = 0x4
                polarity_inversion_port_1 = 0x5
                configure_RW_port_0 = 0x6
                configure_RW_port_1 = 0x7
                bus = smbus.SMBus(self.i2c)

                for board_id in self.A['board']:
                    if self.A['board'][board_id]['board_type_id'] == 5:  # PCA9535 16 I/O
                        bus.write_byte_data(int(self.A['board'][board_id]['address']), polarity_inversion_port_0, 0)
                        bus.write_byte_data(int(self.A['board'][board_id]['address']), polarity_inversion_port_1, 0)
                        bus.write_byte_data(int(self.A['board'][board_id]['address']), configure_RW_port_0, 0)
                        bus.write_byte_data(int(self.A['board'][board_id]['address']), configure_RW_port_1, 0)
                        """
                        for x in range(0,255):
                            bus.write_byte(int(self.A['board'][board_id]['address']), x)

                            val = bus.read_byte_data(int(self.A['board'][board_id]['address']), 0)
                            print bin(val)
                            time.sleep(0.01)
                        """

    def getDict1(self, dictionary, reloadDict=False):  # Send DICT to web.py when request. If Dict is equal, send empty.
        # print self.P[4]
        if dictionary == 'P':
            if self.PCopy == self.P and reloadDict is False:
                # print "P Uguale"
                return {}
            else:
                # print "P diverso"
                self.PCopy = copy.deepcopy(self.P)
                return self.P

        elif dictionary == 'A':
            if self.A == self.ACopy and reloadDict is False:
                return {}
            else:
                self.ACopy = copy.deepcopy(self.A)
                return self.A

        elif dictionary == 'IO':
            if self.IO == self.IOCopy and reloadDict is False:
                return {}
            else:
                self.IOCopy = copy.deepcopy(self.IO)
                return self.IO

        elif dictionary == 'B':
            if self.B == self.BCopy and reloadDict is False:
                return {}
            else:
                self.BCopy = copy.deepcopy(self.B)
                return self.B

        elif dictionary == 'C':
            if self.C == self.CCopy and reloadDict is False:
                return {}
            else:
                self.CCopy = copy.deepcopy(self.C)
                return self.C

    # New Version #
    # dictionary definition:
    # Self.A = contain all database information
    # self.IO = in / out / sensor value
    # self.P = program database
    def loop(self):  # Loop principale
        # self.getInStatus()  # Leggo lo stato delle schede e aggiorno dizionario se e' cambiato
        ## print self.IO['io']  # stampo dizionario
        # self.updateIO()  # aggiorna in self.IO['board_io'] lo stato dei singoli ingressi / uscite
        ## print self.IO['board_io']
        # self.updateOut()
        pass

    def getInStatus(self):
        """
        Get Byte Status of all board
        Legge il valore degli ingressi/uscite delle varie schede
        """
        #~ print self.A
        #~ print
        #~ print self.IO
        #~ print
        #~ print self.P

        for board_id in self.A['board']:  # get status of boards
            board = self.A['board'][board_id]


            if int(board['board_type_id']) == 1:  # i2c board
                bus = smbus.SMBus(self.i2c)
                data = bus.read_byte(int(board['address']))  # legge lo stato degli ingressi
                data_old = self.IO['io'][board['id']]['value']

                if data != data_old:
                    diff = int(data) ^ int(data_old)
                    # print "Diff : ", diff
                    self.IO['io'].update({board['id']: {'value': data, 'update': diff}})  # aggiorna  dizionario

            elif int(board['board_type_id']) == 2:  # RS485 board
                pass  # To Do
                self.IO['io'].update({board['id']: 0})
            elif int(board['board_type_id']) == 3:  # WEB - virtual board
                self.IO['io'].update({board['id']: {'value': 0, 'update': 0}})  # aggiorna  dizionario

            elif int(board['board_type_id']) == 5:  # PD9535
                """
                bus = smbus.SMBus(self.i2c)
                print dir(bus)
                for x in range(0,10):
                    try:
                        pass
                        # bus.write_byte(int(board['address']), x)
                    except:
                        pass
                data = bus.read_byte_data(int(board['address']),0) #legge lo stato degli ingressi
                print data
                """
                pass

                # self.IO['io'].update({board['id']: {'value': 0, 'update': 0 }}) #aggiorna  dizionario

    def updateIO(self):
        """
        funzione che aggiorna self.IO['board_io']
        """

        for board_id, data in self.IO['io'].iteritems():  # iterazione degli IO (byte)
            #~ print board_id, data
            address = 0
            while data['update'] > 0:  # se update e' >0 significa che e' cambiato lo stato IO
                if data['update'] & 1 == 1:  # se 1 il bit meno significativo e' cambiato
                    board_io_id = self.M['board_io_m'].get((board_id, address), 0)  # seleziono il board_io_id da cambiare
                    if board_io_id > 0:  # se >0 il board_io_id e' mappato, esiste nel database
                        bit_value = self.getBitValue(data['value'], address)  # vede il valore del bit cambiato
                        self.IO['board_io'][board_io_id]['SA'] = bit_value  # imposta lo stato del bit nel dizionario
                data['update'] = int(data['update']) / 2  # divide per 2 il data['update'] per vedere il secondo bit
                address += 1



    def updateOut(self):

        for pid, data in self.P.iteritems():
            # print self.IO['io'], self.IO['board_io'][data['out_id']]
            # print pid, data

            type_id = data['type_id']  # program.type_id
            inverted = 1 if data['inverted'] == 1 else 0
            out_board_io_id = self.IO['board_io'][data['out_id']]['id']
            out_board_id = self.IO['board_io'][out_board_io_id]['board_id']
            out_address = self.IO['board_io'][out_board_io_id]['address']
            # print "out_board_io_id:", out_board_io_id, "  out_board_id:", out_board_id, "   out_address:", out_address

            if type_id == 1:  # timer: luci scale: incomincia a decrementare quando il pulsante torna a 0
                # print pid, data, '\n',  self.IO['board_io'][data['in_id']],'\n',  self.IO['board_io'][data['out_id']]
                if self.IO['board_io'][data['in_id']]['SA'] and self.IO['board_io'][data['in_id']]['TA'] == 0:
                    timer = data['timer']
                    timer = timer.split('-')
                    timer = (int(timer[0]) * 24 * 3600) + (int(timer[1]) * 3600) + (int(timer[2]) * 60) + int(timer[3])
                    data['TA'] = timer

                if data['TA'] > 0:
                    out_status = inverted ^ 1
                    self.IO['board_io'][data['out_id']]['SA'] = out_status
                    self.setBit(self.IO['board_io'][data['out_id']]['board_id'], self.IO['board_io'][data['out_id']]['address'], out_status)

                else:
                    out_status = int(not (inverted ^ 1))
                    self.IO['board_io'][data['out_id']]['SA'] = out_status
                    self.setBit(self.IO['board_io'][data['out_id']]['board_id'], self.IO['board_io'][data['out_id']]['address'], out_status)

            elif type_id == 2:  # timeout
                # print "Timeout", pid, data, '\n',  self.IO['board_io'][data['in_id']],'\n',  self.IO['board_io'][data['out_id']]
                if self.IO['board_io'][data['in_id']]['SA'] and self.IO['board_io'][data['in_id']]['SP'] == '':
                    timer = data['timer']
                    timer = timer.split('-')
                    timer = (int(timer[0]) * 24 * 3600) + (int(timer[1]) * 3600) + (int(timer[2]) * 60) + int(timer[3])
                    data['TA'] = timer
                    self.IO['board_io'][data['in_id']]['SP'] = 1
                if self.IO['board_io'][data['in_id']]['SA'] == 0 and self.IO['board_io'][data['in_id']]['SP'] == 1:
                    self.IO['board_io'][data['in_id']]['SP'] = ''

                if data['TA'] > 0:
                    out_status = inverted ^ 1
                else:
                    out_status = int(not (inverted ^ 1))

                self.IO['board_io'][data['out_id']]['SA'] = out_status
                byte = self.setBit(self.IO['io'][out_board_id]['value'], out_address, out_status)
                if byte != self.IO['io'][out_board_id]['value']:
                    self.setIO(out_board_id, byte)

            elif type_id == 3:  # automatic
                # print "Automatic", pid, data, '\n',  self.IO['board_io'][data['in_id']],'\n',  self.IO['board_io'][data['out_id']]
                chrono = data['chrono'].split(';')
                chronoOpen = 0
                date = self.now().strftime('%Y-%m-%d')
                for ch in chrono:
                    c = ch.split('-')
                    fd = c.pop(0)
                    fh = c.pop(0)
                    fm = c.pop(0)
                    fs = c.pop(0)

                    td = c.pop(0)
                    th = c.pop(0)
                    tm = c.pop(0)
                    ts = c.pop(0)

                    tfrom = '{} {}:{}:{}'.format(date, fh, fm, fs)
                    tto = '{} {}:{}:{}'.format(date, th, tm, ts)

                    FMT = '%Y-%m-%d %H:%M:%S'

                    timefrom = datetime.datetime.strptime(tfrom, FMT)
                    timeto = datetime.datetime.strptime(tto, FMT)

                    daynow = self.now().weekday()  # Day of week
                    # print "From: ", tfrom, "\nTo:   ", tto, "\nNow:  ", self.now()

                    if (int(fd) == 7 and int(td) == 7 and self.now() > timefrom and self.now() < timeto) or (int(daynow) >= int(fd) and int(daynow) <= int(td) and self.now() > timefrom and self.now() < timeto):
                        chronoOpen = 1
                if chronoOpen == 1:
                    out_status = inverted ^ 1
                else:
                    out_status = int(not (inverted ^ 1))

                self.IO['board_io'][data['out_id']]['SA'] = out_status
                byte = self.setBit(self.IO['io'][out_board_id]['value'], out_address, out_status)
                if byte != self.IO['io'][out_board_id]['value']:
                    self.setIO(out_board_id, byte)

            elif type_id == 4:  # manual
                # print pid, data, '\n',  self.IO['board_io'][data['in_id']],'\n',  self.IO['board_io'][data['out_id']]
                out_status = inverted ^ self.IO['board_io'][data['in_id']]['SA']
                self.IO['board_io'][data['out_id']]['SA'] = out_status
                byte = self.setBit(self.IO['io'][out_board_id]['value'], out_address, out_status)
                if byte != self.IO['io'][out_board_id]['value']:
                    self.setIO(out_board_id, byte)

    def counter(self):
        """
        Funzione che decrementa i timer interni al programma
        """
        for p in self.P:
            if self.P[p]['TA'] > 0:
                self.P[p]['TA'] -= 1

    """
    def getSensorStatus(self): Rimuovere

        # print "----------------- Get Sensor Values ---------------"
        for board_id in self.A['board']:  # get status of boards
            board = self.A['board'][board_id]
            if int(board['board_type_id']) == 4:  # SHT21 Temperature / Humidity sensor
                try:
                    board_io_id = self.M['board_io_m'].get((board_id, 0), 0)  # return board_io_id temperature
                    if board_io_id > 0:
                        temperature = round(sht21.SHT21(i2c).read_temperature(), 1)
                        self.IO['board_io'][board_io_id]['SA'] = temperature
                        q = 'INSERT INTO sensor (type, value) VALUES("{}", "{}");'.format('1', temperature)
                        self.db.query(q)

                    board_io_id = self.M['board_io_m'].get((board_id, 1), 0)  # return board_io_id humidity
                    if board_io_id > 0:
                        humidity = round(sht21.SHT21(self.i2c).read_humidity(), 1)
                        self.IO['board_io'][board_io_id]['SA'] = humidity


                except:  # initialize self.tnow and set temp + hum immediately
                    print "getSensorStatus Error"
    """

    def getBitValue(self, byteval, idx):
        """
        Return if bit in the byte is 0 or 1
        Ritorna il valore del BIT di un Byte
        """
        return 1 if (byteval & (1 << idx)) != 0 else 0

    def setBit(self, byte, index, x):  # forse non serve e si puo' cancellare
        """
        Set bit of byte to x
        Setta a 0 o a 1 il bit di un byte
        Example:  (0b0000, 2, 1) = 0b0100
        Example:  (0b0111, 2, 0) = 0b0011
        """
        byte = int(byte)
        index = int(index)
        mask = 1 << index
        byte &= mask

        if x:
            byte |= mask
        return byte

    def setIO(self, board_id, byte):
        """
        Set I2C status
        """
        board_address = self.A['board'][board_id]['address']
        # print board_address, board_id
        bus = smbus.SMBus(self.i2c)
        bus.write_byte(board_address, byte)
